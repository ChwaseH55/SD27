--- Start of ./client/src/components\Account.js ---
// src/components/Account.js
import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { logoutUser } from '../reducers/userReducer'; // Adjust the path if necessary
import { useNavigate } from 'react-router-dom';

const Account = () => {
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const user = useSelector((state) => state.user.user); // Access the user state from the Redux store

    const handleLogout = () => {
        dispatch(logoutUser());
        navigate('/login'); // Redirect to login page after logout
    };

    return (
        <div className="flex justify-center items-center min-h-screen bg-gray-100">
            <div className="w-full max-w-md bg-white p-8 rounded shadow-lg">
                <h2 className="text-3xl font-bold text-center mb-6">Account</h2>
                {user ? (
                    <div>
                        <p className="mb-4">Welcome, {user.username}!</p>
                        <p className="mb-4">Email: {user.email}</p>
                        <button
                            onClick={handleLogout}
                            className="bg-red-500 text-white font-semibold py-2 rounded hover:bg-red-600 transition w-full"
                        >
                            Logout
                        </button>
                    </div>
                ) : (
                    <p className="text-center">You are not logged in.</p>
                )}
            </div>
        </div>
    );
};

export default Account;

--- End of ./client/src/components\Account.js ---

--- Start of ./client/src/components\Home.js ---
import React from 'react';
import { Link } from 'react-router-dom';

const Home = () => {
    return (
        <div className="flex flex-col h-full w-full bg-gradient-to-b from-ucfBlack to-ucfGold text-white">
            {/* Navbar */}
            <nav className="flex justify-between items-center w-full p-4 bg-ucfBlack bg-opacity-70 fixed top-0 z-10">
                <div className="text-xl font-bold">Golf Club @ UCF</div>
                <div className="flex gap-4">
                    <Link to="/account">
                        <button className="px-4 py-2 text-black bg-gold rounded hover:bg-opacity-80 transition">
                            My Account
                        </button>
                    </Link>
                    <Link to="/calendar">
                        <button className="px-4 py-2 text-black bg-gold rounded hover:bg-opacity-80 transition">
                            Calendar
                        </button>
                    </Link>
                    <Link to="/forum">
                        <button className="px-4 py-2 text-black bg-gold rounded hover:bg-opacity-80 transition">
                            Forum
                        </button>
                    </Link>
                    <Link to="/shop">
                        <button className="px-4 py-2 text-black bg-gold rounded hover:bg-opacity-80 transition">
                            Shop
                        </button>
                    </Link>
                </div>
            </nav>

            {/* Main Content */}
            <div className="flex flex-col items-center justify-center flex-1 p-4 mt-16">
                <h1 className="text-3xl font-bold mb-2 text-center">Welcome Back to the Golf Club at UCF!</h1>
                <p className="text-md text-center max-w-md mb-4">
                    We're excited to have you back! Explore your options below.
                </p>

                {/* Links to Other Pages */}
                <div className="bg-black bg-opacity-70 p-3 rounded-lg shadow-lg max-w-3xl w-full mt-4">
                    <h2 className="text-xl font-semibold mb-1">Explore</h2>
                    <ul className="list-disc pl-5 mb-4">
                        <li>
                            <Link to="/account" className="text-gold hover:underline">
                                Your Account
                            </Link>
                        </li>
                        <li>
                            <Link to="/calendar" className="text-gold hover:underline">
                                Upcoming Events
                            </Link>
                        </li>
                        <li>
                            <Link to="/forum" className="text-gold hover:underline">
                                Community Forum
                            </Link>
                        </li>
                        <li>
                            <Link to="/shop" className="text-gold hover:underline">
                                Merchandise Shop
                            </Link>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    );
};

export default Home;

--- End of ./client/src/components\Home.js ---

--- Start of ./client/src/components\Landing.js ---
// src/components/Landing.js

import React, { useEffect } from 'react';
import { Link } from 'react-router-dom';
import { animateScroll as scroll, scroller } from 'react-scroll';
import AOS from 'aos';
import 'aos/dist/aos.css';
import clubLogo from '../assets/clublogo.png';

const Landing = () => {
  useEffect(() => {
    // Initialize AOS (Animate On Scroll) Library
    AOS.init({
      duration: 800,
      once: true,
    });
  }, []);

  const scrollToSection = (sectionId) => {
    scroller.scrollTo(sectionId, {
      duration: 800,
      delay: 0,
      smooth: 'easeInOutQuart',
      offset: -80, // Adjust for fixed navbar height
    });
  };

  return (
    <div className="flex flex-col min-h-screen bg-white text-gray-800">
      {/* Navbar */}
      <nav className="fixed top-0 left-0 w-full flex justify-between items-center px-6 py-4 z-20 bg-white bg-opacity-90 shadow-md backdrop-filter backdrop-blur-lg">
        <div className="flex items-center">
        <img src={clubLogo} alt="UCF Golf Club" className="h-10 mr-3" />
          <span className="text-2xl font-bold text-gray-800">UCF Golf Club</span>
        </div>
        <div className="flex items-center gap-6">
          <button
            onClick={() => scrollToSection('about')}
            className="text-gray-800 hover:text-ucfGold transition"
          >
            About
          </button>
          <button
            onClick={() => scrollToSection('team')}
            className="text-gray-800 hover:text-ucfGold transition"
          >
            Team
          </button>
          <button
            onClick={() => scrollToSection('events')}
            className="text-gray-800 hover:text-ucfGold transition"
          >
            Events
          </button>
          <button
            onClick={() => scrollToSection('gallery')}
            className="text-gray-800 hover:text-ucfGold transition"
          >
            Gallery
          </button>
          <button
            onClick={() => scrollToSection('contact')}
            className="text-gray-800 hover:text-ucfGold transition"
          >
            Contact
          </button>
          <Link to="/login">
            <button className="px-4 py-2 bg-transparent border border-ucfGold text-ucfGold rounded hover:bg-ucfGold hover:text-white transition">
              Login
            </button>
          </Link>
          <Link to="/register">
            <button className="px-4 py-2 bg-ucfGold text-white rounded hover:bg-ucfGold-dark transition">
              Register
            </button>
          </Link>
        </div>
      </nav>

      {/* Hero Section */}
      <header
        id="hero"
        className="relative bg-cover bg-center min-h-screen flex items-center"
        style={{ backgroundImage: 'url(/knightro.png)' }} // Using knightro.png
      >
        {/* Overlay */}
        <div className="absolute inset-0 bg-black bg-opacity-60"></div>
        {/* Hero Content */}
        <div
          className="relative z-10 flex flex-col items-center justify-center text-center text-white px-4"
          data-aos="fade-in"
        >
          <h1 className="text-5xl md:text-7xl font-extrabold mb-6">
            Welcome to the UCF Golf Club
          </h1>
          <p className="text-xl md:text-2xl max-w-2xl mb-8">
            Join our community of passionate golfers at the University of Central Florida.
          </p>
          <Link to="/register">
            <button className="mt-4 px-8 py-4 bg-ucfGold text-white rounded-full text-lg font-semibold hover:bg-ucfGold-dark transition">
              Become a Member
            </button>
          </Link>
        </div>
        {/* Scroll Down Indicator */}
        <div className="absolute bottom-10 left-1/2 transform -translate-x-1/2">
          <button onClick={() => scrollToSection('about')}>
            <svg
              className="w-8 h-8 text-white animate-bounce"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </button>
        </div>
      </header>

      {/* About Us Section */}
      <section id="about" className="py-16 px-8 bg-gray-50">
        <div className="max-w-5xl mx-auto text-center" data-aos="fade-up">
          <h2 className="text-4xl font-bold mb-8">About Us</h2>
          <p className="text-lg mb-6">
            The UCF Golf Club is dedicated to promoting the sport of golf among students and faculty.
            Whether you're a seasoned player or just starting out, our club offers something for everyone.
          </p>
          <p className="text-lg">
            We host regular tournaments, training sessions, and social events to bring together golf enthusiasts at UCF.
          </p>
        </div>
      </section>

      {/* Team Members Section */}
      <section id="team" className="py-16 px-8">
        <div className="max-w-7xl mx-auto" data-aos="fade-up">
          <h2 className="text-4xl font-bold text-center mb-12">Meet the Team</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {/* Team Member Card */}
            <div
              className="bg-white shadow-lg rounded-lg p-6 flex flex-col items-center"
              data-aos="zoom-in"
            >
              <img
                src="/knightro.png" // Using knightro.png
                alt="Team Member"
                className="w-32 h-32 rounded-full mb-4 object-cover"
              />
              <h3 className="text-xl font-semibold mb-2">Alex Johnson</h3>
              <p className="text-gray-600">Club President</p>
            </div>
            {/* Add more team member cards as needed */}
          </div>
        </div>
      </section>

      {/* Upcoming Events Section */}
      <section id="events" className="py-16 px-8 bg-gray-50">
        <div className="max-w-7xl mx-auto" data-aos="fade-up">
          <h2 className="text-4xl font-bold text-center mb-12">Upcoming Events</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {/* Event Card */}
            <div
              className="bg-white shadow-lg rounded-lg p-6 flex flex-col"
              data-aos="fade-up"
              data-aos-delay="100"
            >
              <h3 className="text-2xl font-semibold mb-2">Spring Tournament</h3>
              <p className="text-gray-600 mb-4">March 15, 2024</p>
              <p className="text-gray-700 mb-6">
                Join us for our annual spring tournament. All skill levels welcome!
              </p>
              <Link to="/events" className="mt-auto">
                <button className="px-6 py-2 bg-ucfGold text-white rounded-full hover:bg-ucfGold-dark transition">
                  Learn More
                </button>
              </Link>
            </div>
            {/* Add more event cards as needed */}
          </div>
        </div>
      </section>

      {/* Photo Gallery Section */}
      <section id="gallery" className="py-16 px-8">
        <div className="max-w-7xl mx-auto text-center" data-aos="fade-up">
          <h2 className="text-4xl font-bold mb-12">Gallery</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {/* Gallery Images */}
            <img
              src="/knightro.png" // Using knightro.png
              alt="Gallery"
              className="w-full h-48 object-cover rounded-lg"
              data-aos="zoom-in"
            />
            {/* Add more images as needed */}
          </div>
        </div>
      </section>

      {/* Contact Section */}
      <section id="contact" className="py-16 px-8 bg-gray-50">
        <div className="max-w-5xl mx-auto text-center" data-aos="fade-up">
          <h2 className="text-4xl font-bold mb-8">Get in Touch</h2>
          <p className="text-lg mb-6">
            Have questions or want to learn more? Reach out to us!
          </p>
          <Link to="/contact">
            <button className="mt-6 px-8 py-4 bg-ucfGold text-white rounded-full text-lg font-semibold hover:bg-ucfGold-dark transition">
              Contact Us
            </button>
          </Link>
        </div>
      </section>

      {/* Footer */}
      <footer className="py-8 bg-gray-800 text-white">
        <div className="max-w-7xl mx-auto flex flex-col md:flex-row justify-between items-center px-4">
          <p className="text-center md:text-left">
            &copy; {new Date().getFullYear()} UCF Golf Club. All rights reserved.
          </p>
          <div className="flex gap-6 mt-4 md:mt-0">
            <button onClick={() => scrollToSection('about')} className="hover:underline">
              About
            </button>
            <button onClick={() => scrollToSection('events')} className="hover:underline">
              Events
            </button>
            <button onClick={() => scrollToSection('contact')} className="hover:underline">
              Contact
            </button>
            <Link to="/privacy" className="hover:underline">
              Privacy Policy
            </Link>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Landing;

--- End of ./client/src/components\Landing.js ---

--- Start of ./client/src/components\Login.js ---
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { login } from '../reducers/userReducer';
import { useNavigate, Link } from 'react-router-dom';
import clubLogo from '../assets/clublogo.png';

const Login = () => {
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [errorMessage, setErrorMessage] = useState('');

    const handleLogin = async (e) => {
        e.preventDefault();
        const result = await dispatch(login(username, password));
        if (result.error) {
            setErrorMessage(result.error.message);
        } else {
            navigate('/home');
        }
    };

    return (
        <div className="flex flex-col items-center min-h-screen bg-gradient-to-b from-blue-500 to-blue-800">
            <div className="w-full max-w-lg bg-gray-100 p-10 rounded-lg shadow-xl mt-20">
                <div className="flex justify-between items-center mb-6">
                    <img src={clubLogo} alt="UCF Golf Club Logo" className="h-12" />
                    <Link to="/" className="text-blue-500 hover:underline text-lg">Home</Link>
                </div>
                <h2 className="text-4xl font-extrabold text-center mb-4 text-blue-700">Welcome Back</h2>
                <p className="text-center text-gray-600 mb-6">
                    Log in to continue to your dashboard
                </p>
                {errorMessage && <p className="text-red-500 text-center mb-4">{errorMessage}</p>}
                <form onSubmit={handleLogin} className="flex flex-col space-y-5">
                    <input
                        type="text"
                        placeholder="Username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        className="border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring focus:ring-blue-300"
                        required
                    />
                    <input
                        type="password"
                        placeholder="Password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring focus:ring-blue-300"
                        required
                    />
                    <button
                        type="submit"
                        className="w-full bg-blue-500 text-white py-3 rounded-lg font-medium hover:bg-blue-600 transition"
                    >
                        Log In
                    </button>
                </form>
                <p className="text-center mt-4">
                    Don't have an account? <Link to="/register" className="text-blue-500 hover:underline">Register</Link>
                </p>
            </div>
        </div>
    );
};

export default Login;

--- End of ./client/src/components\Login.js ---

--- Start of ./client/src/components\Nav.js ---
import React from 'react';
import { Link } from 'react-router-dom';

const Nav = () => {
  return (
    <nav className="flex justify-between items-center w-full p-4 bg-ucfBlack bg-opacity-70 fixed top-0 z-10">
    <div className="text-xl font-bold">Golf Club @ UCF</div>
    <div className="flex gap-4">
        <Link to="/login">
            <button className="px-4 py-2 text-ucfGold bg-gold rounded hover:bg-opacity-80 transition">
                Login
            </button>
        </Link>
        <Link to="/register">
            <button className="px-4 py-2 text-ucfGold bg-gold rounded hover:bg-opacity-80 transition">
                Register
            </button>
        </Link>
    </div>
</nav>
  );
};

export default Nav;

--- End of ./client/src/components\Nav.js ---

--- Start of ./client/src/components\Register.js ---
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { register } from '../reducers/userReducer';
import { useNavigate, Link } from 'react-router-dom';
import clubLogo from '../assets/clublogo.png';

const Register = () => {
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');

    const handleRegister = async (e) => {
        e.preventDefault();
        const resultAction = await dispatch(register({ username, email, password, firstName, lastName }));
        if (resultAction.success) {
            navigate('/home');
        } else {
            console.error(resultAction.error);
            alert("Registration failed: " + resultAction.error);
        }
    };

    return (
        <div className="flex justify-center items-center min-h-screen bg-gradient-to-b from-gray-800 to-yellow-500 text-white">
            <div className="w-full max-w-md bg-gray-900 bg-opacity-90 p-8 rounded-lg shadow-2xl">
                <div className="flex justify-between items-center mb-6">
                    <img src={clubLogo} alt="UCF Golf Club Logo" className="h-12" />
                    <Link to="/" className="text-yellow-400 hover:underline text-lg">Home</Link>
                </div>
                <h2 className="text-4xl font-extrabold text-center mb-6">Register</h2>
                <form onSubmit={handleRegister} className="flex flex-col space-y-4">
                    <input
                        type="text"
                        placeholder="First Name"
                        value={firstName}
                        onChange={(e) => setFirstName(e.target.value)}
                        className="border border-gray-400 bg-gray-800 text-white rounded-lg p-3 focus:outline-none focus:border-yellow-500"
                        required
                    />
                    <input
                        type="text"
                        placeholder="Last Name"
                        value={lastName}
                        onChange={(e) => setLastName(e.target.value)}
                        className="border border-gray-400 bg-gray-800 text-white rounded-lg p-3 focus:outline-none focus:border-yellow-500"
                        required
                    />
                    <input
                        type="text"
                        placeholder="Username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        className="border border-gray-400 bg-gray-800 text-white rounded-lg p-3 focus:outline-none focus:border-yellow-500"
                        required
                    />
                    <input
                        type="email"
                        placeholder="Email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        className="border border-gray-400 bg-gray-800 text-white rounded-lg p-3 focus:outline-none focus:border-yellow-500"
                        required
                    />
                    <input
                        type="password"
                        placeholder="Password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="border border-gray-400 bg-gray-800 text-white rounded-lg p-3 focus:outline-none focus:border-yellow-500"
                        required
                    />
                    <button type="submit" className="bg-yellow-500 text-gray-900 font-semibold py-3 rounded-lg hover:bg-yellow-600 transition">
                        Register
                    </button>
                </form>
                <p className="text-center mt-4">
                    Already have an account? <Link to="/login" className="text-yellow-400 hover:underline">Log In</Link>
                </p>
            </div>
        </div>
    );
};

export default Register;

--- End of ./client/src/components\Register.js ---

--- Start of ./client/src/components\SlidingAuth.css ---
body {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
  background: #f6f5f7;
  font-family: 'Arial', sans-serif;
}

h1 {
  color: #dc4024;
  font-weight: bold;
  margin: 0;
}

p {
  font-size: 14px;
  font-weight: 100;
  line-height: 20px;
  letter-spacing: 0.5px;
  margin: 20px 10px 30px;
}

button {
  border-radius: 20px;
  border: 1px solid #ff4b2b;
  background-color: #ff4b2b;
  color: #ffffff;
  font-size: 15px;
  font-weight: bold;
  padding: 12px 45px;
  text-transform: uppercase;
  transition: transform 80ms ease-in;
  cursor: pointer;
}

button:active {
  transform: scale(0.95);
}

.container {
  background-color: #ffffff;
  border-radius: 10px;
  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25),
    0 10px 10px rgba(0, 0, 0, 0.22);
  position: relative;
  overflow: hidden;
  width: 768px;
  max-width: 100%;
  min-height: 480px;
}

.form-container {
  position: absolute;
  top: 0;
  height: 100%;
  transition: all 0.6s ease-in-out;
}

.sign-in-container {
  left: 0;
  width: 50%;
  z-index: 2;
}

.sign-up-container {
  left: 0;
  width: 50%;
  opacity: 0;
  z-index: 1;
}

.container.right-panel-active .sign-in-container {
  transform: translateX(100%);
}

.container.right-panel-active .sign-up-container {
  transform: translateX(100%);
  opacity: 1;
  z-index: 5;
}

.overlay-container {
  position: absolute;
  top: 0;
  left: 50%;
  width: 50%;
  height: 100%;
  transition: transform 0.6s ease-in-out;
  z-index: 100;
}

.overlay {
  background: linear-gradient(to top, #dc4024, #cca63c);
  color: #ffffff;
  position: relative;
  left: -100%;
  height: 100%;
  width: 200%;
  transform: translateX(0);
  transition: transform 0.6s ease-in-out;
}

--- End of ./client/src/components\SlidingAuth.css ---

--- Start of ./client/src/components\SlidingAuth.js ---
// src/components/SlidingAuth.js
import React from 'react';
import './SlidingAuth.css';

const SlidingAuth = () => {
  console.log('SlidingAuth component rendered'); // Debug message
  return (
    <div className="container" id="container">
      <div className="form-container sign-up-container">
        <form>
          <h1>Sign Up</h1>
          <input type="text" id="signup-name" placeholder="Name" />
          <input type="email" id="signup-email" placeholder="Email" />
          <input type="password" id="signup-password" placeholder="Password" />
          <button type="button" onClick={() => alert('Sign Up clicked')}>
            Sign Up
          </button>
        </form>
      </div>
      <div className="form-container sign-in-container">
        <form>
          <h1>Sign In</h1>
          <input type="email" id="email" placeholder="Email" />
          <input type="password" id="password" placeholder="Password" />
          <button type="button" onClick={() => alert('Sign In clicked')}>
            Sign In
          </button>
        </form>
      </div>
      <div className="overlay-container">
        <div className="overlay">
          <div className="overlay-panel overlay-left">
            <h1>Welcome Back!</h1>
            <p>To keep connected with us, please sign in</p>
            <button className="ghost" id="SignIn">
              Sign In
            </button>
          </div>
          <div className="overlay-panel overlay-right">
            <h1>Hello, Friend!</h1>
            <p>Enter your personal details and start your journey with us</p>
            <button className="ghost" id="SignUp">
              Sign Up
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SlidingAuth;

--- End of ./client/src/components\SlidingAuth.js ---

--- Start of ./client/public\index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

--- End of ./client/public\index.html ---

--- Start of ./client/src\App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


--- End of ./client/src\App.css ---

--- Start of ./client/src\App.js ---
// src/App.js
import { Route, Routes, useLocation, useNavigate } from 'react-router-dom';
import { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import axios from 'axios';
import Landing from './components/Landing';
import Home from './components/Home';
import Account from './components/Account';
import Nav from './components/Nav';
import SlidingAuth from './components/SlidingAuth'; // Import SlidingAuth component
import { logout } from './reducers/userReducer';

function App() {
  const [data, setData] = useState(null);
  const location = useLocation();
  const navigate = useNavigate();
  const dispatch = useDispatch();

  const isLandingPage = location.pathname === '/';
  const { user } = useSelector((state) => state.user); // Get user state from Redux

  // Fetch data from the backend on load
  useEffect(() => {
    axios
      .get('http://localhost:5000/api/test')
      .then((response) => setData(response.data.message))
      .catch((error) => console.error(error));
  }, []);

  // Logout function to clear user session
  const handleLogout = () => {
    dispatch(logout());
    navigate('/');
  };

  return (
    <div>
      {!isLandingPage && <Nav onLogout={handleLogout} isLoggedIn={!!user} />}
      <div className="flex flex-col min-h-screen">
        <Routes>
          <Route path="/account" element={<Account />} />
          <Route path="/home" element={<Home />} />
          <Route path="/auth" element={<SlidingAuth />} /> {/* Replace Login/Register with SlidingAuth */}
          <Route path="/" element={<Landing />} />
        </Routes>
        {/* Display server data for testing */}
        {data && (
          <p className="absolute bottom-4 text-center w-full text-sm text-gray-600">
            Server Message: {data}
          </p>
        )}
      </div>
    </div>
  );
}

export default App;

--- End of ./client/src\App.js ---

--- Start of ./client/src\App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

--- End of ./client/src\App.test.js ---

--- Start of ./client/src\index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

--- End of ./client/src\index.css ---

--- Start of ./client/src\index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { BrowserRouter } from 'react-router-dom';
import { Provider } from 'react-redux'; // Import Provider
import store from './store'; // Import your Redux store

// Create a root and render the App component
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <Provider store={store}> {/* Wrap the App with Provider */}
    <BrowserRouter>
      <App />
    </BrowserRouter>
  </Provider>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

--- End of ./client/src\index.js ---

--- Start of ./client/src\reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

--- End of ./client/src\reportWebVitals.js ---

--- Start of ./client/src\setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

--- End of ./client/src\setupTests.js ---

--- Start of ./client/src\store.js ---
// client/src/store.js
import { configureStore } from '@reduxjs/toolkit';
import rootReducer from './reducers'; // Import your root reducer

const store = configureStore({
  reducer: rootReducer,
});

export default store;

--- End of ./client/src\store.js ---

--- Start of ./client/src\actions\userActions.js ---
// src/actions/userActions.js
export const LOGIN = 'LOGIN';
export const LOGOUT = 'LOGOUT';

export const login = (userData) => ({
    type: LOGIN,
    payload: userData,
});

export const logout = () => ({
    type: LOGOUT,
});

--- End of ./client/src\actions\userActions.js ---

--- Start of ./client/src\components\Account.js ---
// src/components/Account.js
import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { logoutUser } from '../reducers/userReducer'; // Adjust the path if necessary
import { useNavigate } from 'react-router-dom';

const Account = () => {
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const user = useSelector((state) => state.user.user); // Access the user state from the Redux store

    const handleLogout = () => {
        dispatch(logoutUser());
        navigate('/login'); // Redirect to login page after logout
    };

    return (
        <div className="flex justify-center items-center min-h-screen bg-gray-100">
            <div className="w-full max-w-md bg-white p-8 rounded shadow-lg">
                <h2 className="text-3xl font-bold text-center mb-6">Account</h2>
                {user ? (
                    <div>
                        <p className="mb-4">Welcome, {user.username}!</p>
                        <p className="mb-4">Email: {user.email}</p>
                        <button
                            onClick={handleLogout}
                            className="bg-red-500 text-white font-semibold py-2 rounded hover:bg-red-600 transition w-full"
                        >
                            Logout
                        </button>
                    </div>
                ) : (
                    <p className="text-center">You are not logged in.</p>
                )}
            </div>
        </div>
    );
};

export default Account;

--- End of ./client/src\components\Account.js ---

--- Start of ./client/src\components\Home.js ---
import React from 'react';
import { Link } from 'react-router-dom';

const Home = () => {
    return (
        <div className="flex flex-col h-full w-full bg-gradient-to-b from-ucfBlack to-ucfGold text-white">
            {/* Navbar */}
            <nav className="flex justify-between items-center w-full p-4 bg-ucfBlack bg-opacity-70 fixed top-0 z-10">
                <div className="text-xl font-bold">Golf Club @ UCF</div>
                <div className="flex gap-4">
                    <Link to="/account">
                        <button className="px-4 py-2 text-black bg-gold rounded hover:bg-opacity-80 transition">
                            My Account
                        </button>
                    </Link>
                    <Link to="/calendar">
                        <button className="px-4 py-2 text-black bg-gold rounded hover:bg-opacity-80 transition">
                            Calendar
                        </button>
                    </Link>
                    <Link to="/forum">
                        <button className="px-4 py-2 text-black bg-gold rounded hover:bg-opacity-80 transition">
                            Forum
                        </button>
                    </Link>
                    <Link to="/shop">
                        <button className="px-4 py-2 text-black bg-gold rounded hover:bg-opacity-80 transition">
                            Shop
                        </button>
                    </Link>
                </div>
            </nav>

            {/* Main Content */}
            <div className="flex flex-col items-center justify-center flex-1 p-4 mt-16">
                <h1 className="text-3xl font-bold mb-2 text-center">Welcome Back to the Golf Club at UCF!</h1>
                <p className="text-md text-center max-w-md mb-4">
                    We're excited to have you back! Explore your options below.
                </p>

                {/* Links to Other Pages */}
                <div className="bg-black bg-opacity-70 p-3 rounded-lg shadow-lg max-w-3xl w-full mt-4">
                    <h2 className="text-xl font-semibold mb-1">Explore</h2>
                    <ul className="list-disc pl-5 mb-4">
                        <li>
                            <Link to="/account" className="text-gold hover:underline">
                                Your Account
                            </Link>
                        </li>
                        <li>
                            <Link to="/calendar" className="text-gold hover:underline">
                                Upcoming Events
                            </Link>
                        </li>
                        <li>
                            <Link to="/forum" className="text-gold hover:underline">
                                Community Forum
                            </Link>
                        </li>
                        <li>
                            <Link to="/shop" className="text-gold hover:underline">
                                Merchandise Shop
                            </Link>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    );
};

export default Home;

--- End of ./client/src\components\Home.js ---

--- Start of ./client/src\components\Landing.js ---
// src/components/Landing.js

import React, { useEffect } from 'react';
import { Link } from 'react-router-dom';
import { animateScroll as scroll, scroller } from 'react-scroll';
import AOS from 'aos';
import 'aos/dist/aos.css';
import clubLogo from '../assets/clublogo.png';

const Landing = () => {
  useEffect(() => {
    // Initialize AOS (Animate On Scroll) Library
    AOS.init({
      duration: 800,
      once: true,
    });
  }, []);

  const scrollToSection = (sectionId) => {
    scroller.scrollTo(sectionId, {
      duration: 800,
      delay: 0,
      smooth: 'easeInOutQuart',
      offset: -80, // Adjust for fixed navbar height
    });
  };

  return (
    <div className="flex flex-col min-h-screen bg-white text-gray-800">
      {/* Navbar */}
      <nav className="fixed top-0 left-0 w-full flex justify-between items-center px-6 py-4 z-20 bg-white bg-opacity-90 shadow-md backdrop-filter backdrop-blur-lg">
        <div className="flex items-center">
        <img src={clubLogo} alt="UCF Golf Club" className="h-10 mr-3" />
          <span className="text-2xl font-bold text-gray-800">UCF Golf Club</span>
        </div>
        <div className="flex items-center gap-6">
          <button
            onClick={() => scrollToSection('about')}
            className="text-gray-800 hover:text-ucfGold transition"
          >
            About
          </button>
          <button
            onClick={() => scrollToSection('team')}
            className="text-gray-800 hover:text-ucfGold transition"
          >
            Team
          </button>
          <button
            onClick={() => scrollToSection('events')}
            className="text-gray-800 hover:text-ucfGold transition"
          >
            Events
          </button>
          <button
            onClick={() => scrollToSection('gallery')}
            className="text-gray-800 hover:text-ucfGold transition"
          >
            Gallery
          </button>
          <button
            onClick={() => scrollToSection('contact')}
            className="text-gray-800 hover:text-ucfGold transition"
          >
            Contact
          </button>
          <Link to="/login">
            <button className="px-4 py-2 bg-transparent border border-ucfGold text-ucfGold rounded hover:bg-ucfGold hover:text-white transition">
              Login
            </button>
          </Link>
          <Link to="/register">
            <button className="px-4 py-2 bg-ucfGold text-white rounded hover:bg-ucfGold-dark transition">
              Register
            </button>
          </Link>
        </div>
      </nav>

      {/* Hero Section */}
      <header
        id="hero"
        className="relative bg-cover bg-center min-h-screen flex items-center"
        style={{ backgroundImage: 'url(/knightro.png)' }} // Using knightro.png
      >
        {/* Overlay */}
        <div className="absolute inset-0 bg-black bg-opacity-60"></div>
        {/* Hero Content */}
        <div
          className="relative z-10 flex flex-col items-center justify-center text-center text-white px-4"
          data-aos="fade-in"
        >
          <h1 className="text-5xl md:text-7xl font-extrabold mb-6">
            Welcome to the UCF Golf Club
          </h1>
          <p className="text-xl md:text-2xl max-w-2xl mb-8">
            Join our community of passionate golfers at the University of Central Florida.
          </p>
          <Link to="/register">
            <button className="mt-4 px-8 py-4 bg-ucfGold text-white rounded-full text-lg font-semibold hover:bg-ucfGold-dark transition">
              Become a Member
            </button>
          </Link>
        </div>
        {/* Scroll Down Indicator */}
        <div className="absolute bottom-10 left-1/2 transform -translate-x-1/2">
          <button onClick={() => scrollToSection('about')}>
            <svg
              className="w-8 h-8 text-white animate-bounce"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </button>
        </div>
      </header>

      {/* About Us Section */}
      <section id="about" className="py-16 px-8 bg-gray-50">
        <div className="max-w-5xl mx-auto text-center" data-aos="fade-up">
          <h2 className="text-4xl font-bold mb-8">About Us</h2>
          <p className="text-lg mb-6">
            The UCF Golf Club is dedicated to promoting the sport of golf among students and faculty.
            Whether you're a seasoned player or just starting out, our club offers something for everyone.
          </p>
          <p className="text-lg">
            We host regular tournaments, training sessions, and social events to bring together golf enthusiasts at UCF.
          </p>
        </div>
      </section>

      {/* Team Members Section */}
      <section id="team" className="py-16 px-8">
        <div className="max-w-7xl mx-auto" data-aos="fade-up">
          <h2 className="text-4xl font-bold text-center mb-12">Meet the Team</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {/* Team Member Card */}
            <div
              className="bg-white shadow-lg rounded-lg p-6 flex flex-col items-center"
              data-aos="zoom-in"
            >
              <img
                src="/knightro.png" // Using knightro.png
                alt="Team Member"
                className="w-32 h-32 rounded-full mb-4 object-cover"
              />
              <h3 className="text-xl font-semibold mb-2">Alex Johnson</h3>
              <p className="text-gray-600">Club President</p>
            </div>
            {/* Add more team member cards as needed */}
          </div>
        </div>
      </section>

      {/* Upcoming Events Section */}
      <section id="events" className="py-16 px-8 bg-gray-50">
        <div className="max-w-7xl mx-auto" data-aos="fade-up">
          <h2 className="text-4xl font-bold text-center mb-12">Upcoming Events</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {/* Event Card */}
            <div
              className="bg-white shadow-lg rounded-lg p-6 flex flex-col"
              data-aos="fade-up"
              data-aos-delay="100"
            >
              <h3 className="text-2xl font-semibold mb-2">Spring Tournament</h3>
              <p className="text-gray-600 mb-4">March 15, 2024</p>
              <p className="text-gray-700 mb-6">
                Join us for our annual spring tournament. All skill levels welcome!
              </p>
              <Link to="/events" className="mt-auto">
                <button className="px-6 py-2 bg-ucfGold text-white rounded-full hover:bg-ucfGold-dark transition">
                  Learn More
                </button>
              </Link>
            </div>
            {/* Add more event cards as needed */}
          </div>
        </div>
      </section>

      {/* Photo Gallery Section */}
      <section id="gallery" className="py-16 px-8">
        <div className="max-w-7xl mx-auto text-center" data-aos="fade-up">
          <h2 className="text-4xl font-bold mb-12">Gallery</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {/* Gallery Images */}
            <img
              src="/knightro.png" // Using knightro.png
              alt="Gallery"
              className="w-full h-48 object-cover rounded-lg"
              data-aos="zoom-in"
            />
            {/* Add more images as needed */}
          </div>
        </div>
      </section>

      {/* Contact Section */}
      <section id="contact" className="py-16 px-8 bg-gray-50">
        <div className="max-w-5xl mx-auto text-center" data-aos="fade-up">
          <h2 className="text-4xl font-bold mb-8">Get in Touch</h2>
          <p className="text-lg mb-6">
            Have questions or want to learn more? Reach out to us!
          </p>
          <Link to="/contact">
            <button className="mt-6 px-8 py-4 bg-ucfGold text-white rounded-full text-lg font-semibold hover:bg-ucfGold-dark transition">
              Contact Us
            </button>
          </Link>
        </div>
      </section>

      {/* Footer */}
      <footer className="py-8 bg-gray-800 text-white">
        <div className="max-w-7xl mx-auto flex flex-col md:flex-row justify-between items-center px-4">
          <p className="text-center md:text-left">
            &copy; {new Date().getFullYear()} UCF Golf Club. All rights reserved.
          </p>
          <div className="flex gap-6 mt-4 md:mt-0">
            <button onClick={() => scrollToSection('about')} className="hover:underline">
              About
            </button>
            <button onClick={() => scrollToSection('events')} className="hover:underline">
              Events
            </button>
            <button onClick={() => scrollToSection('contact')} className="hover:underline">
              Contact
            </button>
            <Link to="/privacy" className="hover:underline">
              Privacy Policy
            </Link>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Landing;

--- End of ./client/src\components\Landing.js ---

--- Start of ./client/src\components\Login.js ---
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { login } from '../reducers/userReducer';
import { useNavigate, Link } from 'react-router-dom';
import clubLogo from '../assets/clublogo.png';

const Login = () => {
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [errorMessage, setErrorMessage] = useState('');

    const handleLogin = async (e) => {
        e.preventDefault();
        const result = await dispatch(login(username, password));
        if (result.error) {
            setErrorMessage(result.error.message);
        } else {
            navigate('/home');
        }
    };

    return (
        <div className="flex flex-col items-center min-h-screen bg-gradient-to-b from-blue-500 to-blue-800">
            <div className="w-full max-w-lg bg-gray-100 p-10 rounded-lg shadow-xl mt-20">
                <div className="flex justify-between items-center mb-6">
                    <img src={clubLogo} alt="UCF Golf Club Logo" className="h-12" />
                    <Link to="/" className="text-blue-500 hover:underline text-lg">Home</Link>
                </div>
                <h2 className="text-4xl font-extrabold text-center mb-4 text-blue-700">Welcome Back</h2>
                <p className="text-center text-gray-600 mb-6">
                    Log in to continue to your dashboard
                </p>
                {errorMessage && <p className="text-red-500 text-center mb-4">{errorMessage}</p>}
                <form onSubmit={handleLogin} className="flex flex-col space-y-5">
                    <input
                        type="text"
                        placeholder="Username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        className="border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring focus:ring-blue-300"
                        required
                    />
                    <input
                        type="password"
                        placeholder="Password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="border border-gray-300 rounded-lg p-3 focus:outline-none focus:ring focus:ring-blue-300"
                        required
                    />
                    <button
                        type="submit"
                        className="w-full bg-blue-500 text-white py-3 rounded-lg font-medium hover:bg-blue-600 transition"
                    >
                        Log In
                    </button>
                </form>
                <p className="text-center mt-4">
                    Don't have an account? <Link to="/register" className="text-blue-500 hover:underline">Register</Link>
                </p>
            </div>
        </div>
    );
};

export default Login;

--- End of ./client/src\components\Login.js ---

--- Start of ./client/src\components\Nav.js ---
import React from 'react';
import { Link } from 'react-router-dom';

const Nav = () => {
  return (
    <nav className="flex justify-between items-center w-full p-4 bg-ucfBlack bg-opacity-70 fixed top-0 z-10">
    <div className="text-xl font-bold">Golf Club @ UCF</div>
    <div className="flex gap-4">
        <Link to="/login">
            <button className="px-4 py-2 text-ucfGold bg-gold rounded hover:bg-opacity-80 transition">
                Login
            </button>
        </Link>
        <Link to="/register">
            <button className="px-4 py-2 text-ucfGold bg-gold rounded hover:bg-opacity-80 transition">
                Register
            </button>
        </Link>
    </div>
</nav>
  );
};

export default Nav;

--- End of ./client/src\components\Nav.js ---

--- Start of ./client/src\components\Register.js ---
import React, { useState } from 'react';
import { useDispatch } from 'react-redux';
import { register } from '../reducers/userReducer';
import { useNavigate, Link } from 'react-router-dom';
import clubLogo from '../assets/clublogo.png';

const Register = () => {
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [firstName, setFirstName] = useState('');
    const [lastName, setLastName] = useState('');

    const handleRegister = async (e) => {
        e.preventDefault();
        const resultAction = await dispatch(register({ username, email, password, firstName, lastName }));
        if (resultAction.success) {
            navigate('/home');
        } else {
            console.error(resultAction.error);
            alert("Registration failed: " + resultAction.error);
        }
    };

    return (
        <div className="flex justify-center items-center min-h-screen bg-gradient-to-b from-gray-800 to-yellow-500 text-white">
            <div className="w-full max-w-md bg-gray-900 bg-opacity-90 p-8 rounded-lg shadow-2xl">
                <div className="flex justify-between items-center mb-6">
                    <img src={clubLogo} alt="UCF Golf Club Logo" className="h-12" />
                    <Link to="/" className="text-yellow-400 hover:underline text-lg">Home</Link>
                </div>
                <h2 className="text-4xl font-extrabold text-center mb-6">Register</h2>
                <form onSubmit={handleRegister} className="flex flex-col space-y-4">
                    <input
                        type="text"
                        placeholder="First Name"
                        value={firstName}
                        onChange={(e) => setFirstName(e.target.value)}
                        className="border border-gray-400 bg-gray-800 text-white rounded-lg p-3 focus:outline-none focus:border-yellow-500"
                        required
                    />
                    <input
                        type="text"
                        placeholder="Last Name"
                        value={lastName}
                        onChange={(e) => setLastName(e.target.value)}
                        className="border border-gray-400 bg-gray-800 text-white rounded-lg p-3 focus:outline-none focus:border-yellow-500"
                        required
                    />
                    <input
                        type="text"
                        placeholder="Username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        className="border border-gray-400 bg-gray-800 text-white rounded-lg p-3 focus:outline-none focus:border-yellow-500"
                        required
                    />
                    <input
                        type="email"
                        placeholder="Email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        className="border border-gray-400 bg-gray-800 text-white rounded-lg p-3 focus:outline-none focus:border-yellow-500"
                        required
                    />
                    <input
                        type="password"
                        placeholder="Password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        className="border border-gray-400 bg-gray-800 text-white rounded-lg p-3 focus:outline-none focus:border-yellow-500"
                        required
                    />
                    <button type="submit" className="bg-yellow-500 text-gray-900 font-semibold py-3 rounded-lg hover:bg-yellow-600 transition">
                        Register
                    </button>
                </form>
                <p className="text-center mt-4">
                    Already have an account? <Link to="/login" className="text-yellow-400 hover:underline">Log In</Link>
                </p>
            </div>
        </div>
    );
};

export default Register;

--- End of ./client/src\components\Register.js ---

--- Start of ./client/src\components\SlidingAuth.css ---
body {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
  background: #f6f5f7;
  font-family: 'Arial', sans-serif;
}

h1 {
  color: #dc4024;
  font-weight: bold;
  margin: 0;
}

p {
  font-size: 14px;
  font-weight: 100;
  line-height: 20px;
  letter-spacing: 0.5px;
  margin: 20px 10px 30px;
}

button {
  border-radius: 20px;
  border: 1px solid #ff4b2b;
  background-color: #ff4b2b;
  color: #ffffff;
  font-size: 15px;
  font-weight: bold;
  padding: 12px 45px;
  text-transform: uppercase;
  transition: transform 80ms ease-in;
  cursor: pointer;
}

button:active {
  transform: scale(0.95);
}

.container {
  background-color: #ffffff;
  border-radius: 10px;
  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25),
    0 10px 10px rgba(0, 0, 0, 0.22);
  position: relative;
  overflow: hidden;
  width: 768px;
  max-width: 100%;
  min-height: 480px;
}

.form-container {
  position: absolute;
  top: 0;
  height: 100%;
  transition: all 0.6s ease-in-out;
}

.sign-in-container {
  left: 0;
  width: 50%;
  z-index: 2;
}

.sign-up-container {
  left: 0;
  width: 50%;
  opacity: 0;
  z-index: 1;
}

.container.right-panel-active .sign-in-container {
  transform: translateX(100%);
}

.container.right-panel-active .sign-up-container {
  transform: translateX(100%);
  opacity: 1;
  z-index: 5;
}

.overlay-container {
  position: absolute;
  top: 0;
  left: 50%;
  width: 50%;
  height: 100%;
  transition: transform 0.6s ease-in-out;
  z-index: 100;
}

.overlay {
  background: linear-gradient(to top, #dc4024, #cca63c);
  color: #ffffff;
  position: relative;
  left: -100%;
  height: 100%;
  width: 200%;
  transform: translateX(0);
  transition: transform 0.6s ease-in-out;
}

--- End of ./client/src\components\SlidingAuth.css ---

--- Start of ./client/src\components\SlidingAuth.js ---
// src/components/SlidingAuth.js
import React from 'react';
import './SlidingAuth.css';

const SlidingAuth = () => {
  console.log('SlidingAuth component rendered'); // Debug message
  return (
    <div className="container" id="container">
      <div className="form-container sign-up-container">
        <form>
          <h1>Sign Up</h1>
          <input type="text" id="signup-name" placeholder="Name" />
          <input type="email" id="signup-email" placeholder="Email" />
          <input type="password" id="signup-password" placeholder="Password" />
          <button type="button" onClick={() => alert('Sign Up clicked')}>
            Sign Up
          </button>
        </form>
      </div>
      <div className="form-container sign-in-container">
        <form>
          <h1>Sign In</h1>
          <input type="email" id="email" placeholder="Email" />
          <input type="password" id="password" placeholder="Password" />
          <button type="button" onClick={() => alert('Sign In clicked')}>
            Sign In
          </button>
        </form>
      </div>
      <div className="overlay-container">
        <div className="overlay">
          <div className="overlay-panel overlay-left">
            <h1>Welcome Back!</h1>
            <p>To keep connected with us, please sign in</p>
            <button className="ghost" id="SignIn">
              Sign In
            </button>
          </div>
          <div className="overlay-panel overlay-right">
            <h1>Hello, Friend!</h1>
            <p>Enter your personal details and start your journey with us</p>
            <button className="ghost" id="SignUp">
              Sign Up
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SlidingAuth;

--- End of ./client/src\components\SlidingAuth.js ---

--- Start of ./client/src\reducers\index.js ---
// client/src/reducers/index.js
import { combineReducers } from 'redux';
import todoReducer from './todoReducer';
import userReducer from './userReducer'; // Import the user reducer

const rootReducer = combineReducers({
  todos: todoReducer,
  user: userReducer, // Add user reducer to the root reducer
});

export default rootReducer;

--- End of ./client/src\reducers\index.js ---

--- Start of ./client/src\reducers\todoReducer.js ---
// client/src/reducers/todoReducer.js
const ADD_TODO = 'ADD_TODO';

const initialState = {
  todos: [],
};

export const addTodoAction = (todo) => ({
  type: ADD_TODO,
  payload: todo,
});

const todoReducer = (state = initialState, action) => {
  switch (action.type) {
    case ADD_TODO:
      return {
        ...state,
        todos: [...state.todos, action.payload],
      };
    default:
      return state;
  }
};

export default todoReducer;

--- End of ./client/src\reducers\todoReducer.js ---

--- Start of ./client/src\reducers\userReducer.js ---
// client/src/reducers/userReducer.js
import axios from 'axios';

// Action types
const LOGIN_SUCCESS = 'LOGIN_SUCCESS';
const REGISTER_SUCCESS = 'REGISTER_SUCCESS';
const LOGOUT = 'LOGOUT';

// Initial state
const initialState = {
  user: null,              // Stores user data (e.g., username, email, etc.)
  isAuthenticated: false,  // Boolean to track if user is logged in
};

// Action creators
export const loginSuccess = (userData) => ({
  type: LOGIN_SUCCESS,
  payload: userData,
});

export const registerSuccess = (userData) => ({
  type: REGISTER_SUCCESS,
  payload: userData,
});

export const logout = () => ({
  type: LOGOUT,
});

// Async action to handle login
export const login = (username, password) => async (dispatch) => {
  try {
    const response = await axios.post('http://localhost:5000/api/auth/login', { username, password });
    dispatch(loginSuccess(response.data)); // Dispatch login success with user data
    return { user: response.data }; // Return the user data
  } catch (error) {
    console.error('Login failed:', error);
    // Return an object with an error property
    return { error: { message: error.response?.data?.message || 'Login failed' } };
  }
};


// Async action to handle registration
export const register = ({ username, email, password, firstName, lastName }) => async (dispatch) => {
  try {
      const response = await axios.post('http://localhost:5000/api/auth/register', {           
        username, 
        email, 
        password, 
        firstName, 
        lastName
      });
      dispatch(registerSuccess(response.data));  // Dispatch success with user data
      return { success: true, data: response.data }; // Return success indication
  } catch (error) {
      console.error('Registration failed:', error);
      return { success: false, error: error.response?.data?.message || 'Registration failed' }; // Return error payload
  }
};


// Async action to handle logout
export const logoutUser = () => (dispatch) => {
  // Clear any client-side storage if needed (like JWT in local storage)
  dispatch(logout());  // Dispatch logout action
};

// Reducer
const userReducer = (state = initialState, action) => {
  switch (action.type) {
    case LOGIN_SUCCESS:
    case REGISTER_SUCCESS:
      return {
        ...state,
        user: action.payload,
        isAuthenticated: true,
      };
    case LOGOUT:
      return {
        ...state,
        user: null,
        isAuthenticated: false,
      };
    default:
      return state;
  }
};

export default userReducer;

--- End of ./client/src\reducers\userReducer.js ---

--- Start of ./client/src/actions\userActions.js ---
// src/actions/userActions.js
export const LOGIN = 'LOGIN';
export const LOGOUT = 'LOGOUT';

export const login = (userData) => ({
    type: LOGIN,
    payload: userData,
});

export const logout = () => ({
    type: LOGOUT,
});

--- End of ./client/src/actions\userActions.js ---

--- Start of ./client/src/reducers\index.js ---
// client/src/reducers/index.js
import { combineReducers } from 'redux';
import todoReducer from './todoReducer';
import userReducer from './userReducer'; // Import the user reducer

const rootReducer = combineReducers({
  todos: todoReducer,
  user: userReducer, // Add user reducer to the root reducer
});

export default rootReducer;

--- End of ./client/src/reducers\index.js ---

--- Start of ./client/src/reducers\todoReducer.js ---
// client/src/reducers/todoReducer.js
const ADD_TODO = 'ADD_TODO';

const initialState = {
  todos: [],
};

export const addTodoAction = (todo) => ({
  type: ADD_TODO,
  payload: todo,
});

const todoReducer = (state = initialState, action) => {
  switch (action.type) {
    case ADD_TODO:
      return {
        ...state,
        todos: [...state.todos, action.payload],
      };
    default:
      return state;
  }
};

export default todoReducer;

--- End of ./client/src/reducers\todoReducer.js ---

--- Start of ./client/src/reducers\userReducer.js ---
// client/src/reducers/userReducer.js
import axios from 'axios';

// Action types
const LOGIN_SUCCESS = 'LOGIN_SUCCESS';
const REGISTER_SUCCESS = 'REGISTER_SUCCESS';
const LOGOUT = 'LOGOUT';

// Initial state
const initialState = {
  user: null,              // Stores user data (e.g., username, email, etc.)
  isAuthenticated: false,  // Boolean to track if user is logged in
};

// Action creators
export const loginSuccess = (userData) => ({
  type: LOGIN_SUCCESS,
  payload: userData,
});

export const registerSuccess = (userData) => ({
  type: REGISTER_SUCCESS,
  payload: userData,
});

export const logout = () => ({
  type: LOGOUT,
});

// Async action to handle login
export const login = (username, password) => async (dispatch) => {
  try {
    const response = await axios.post('http://localhost:5000/api/auth/login', { username, password });
    dispatch(loginSuccess(response.data)); // Dispatch login success with user data
    return { user: response.data }; // Return the user data
  } catch (error) {
    console.error('Login failed:', error);
    // Return an object with an error property
    return { error: { message: error.response?.data?.message || 'Login failed' } };
  }
};


// Async action to handle registration
export const register = ({ username, email, password, firstName, lastName }) => async (dispatch) => {
  try {
      const response = await axios.post('http://localhost:5000/api/auth/register', {           
        username, 
        email, 
        password, 
        firstName, 
        lastName
      });
      dispatch(registerSuccess(response.data));  // Dispatch success with user data
      return { success: true, data: response.data }; // Return success indication
  } catch (error) {
      console.error('Registration failed:', error);
      return { success: false, error: error.response?.data?.message || 'Registration failed' }; // Return error payload
  }
};


// Async action to handle logout
export const logoutUser = () => (dispatch) => {
  // Clear any client-side storage if needed (like JWT in local storage)
  dispatch(logout());  // Dispatch logout action
};

// Reducer
const userReducer = (state = initialState, action) => {
  switch (action.type) {
    case LOGIN_SUCCESS:
    case REGISTER_SUCCESS:
      return {
        ...state,
        user: action.payload,
        isAuthenticated: true,
      };
    case LOGOUT:
      return {
        ...state,
        user: null,
        isAuthenticated: false,
      };
    default:
      return state;
  }
};

export default userReducer;

--- End of ./client/src/reducers\userReducer.js ---

--- Start of ./server/routes\announcements.js ---
const express = require('express');
const pool = require('../db'); // Ensure your PostgreSQL pool connection is set up
const router = express.Router();

// Create an announcement
router.post('/', async (req, res) => {
    const { title, content, userid } = req.body;
    try {
        const newAnnouncement = await pool.query(
            `INSERT INTO announcements (title, content, userid, createddate) VALUES ($1, $2, $3, NOW()) RETURNING *`,
            [title, content, userid]
        );
        res.status(201).json(newAnnouncement.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

// Get all announcements
router.get('/', async (req, res) => {
    try {
        const announcements = await pool.query("SELECT * FROM announcements ORDER BY createddate DESC");
        res.json(announcements.rows);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

// Get a single announcement
router.get('/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const announcement = await pool.query(
            `SELECT * FROM announcements WHERE announcementid = $1`,
            [id]
        );
        if (announcement.rows.length === 0) {
            return res.status(404).json({ message: "Announcement not found" });
        }
        res.json(announcement.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

// Update an announcement
router.put('/:id', async (req, res) => {
    const { id } = req.params;
    const { title, content } = req.body;
    try {
        const updatedAnnouncement = await pool.query(
            `UPDATE announcements SET title = $1, content = $2 WHERE announcementid = $3 RETURNING *`,
            [title, content, id]
        );
        if (updatedAnnouncement.rows.length === 0) {
            return res.status(404).json({ message: "Announcement not found" });
        }
        res.json(updatedAnnouncement.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

// Delete an announcement
router.delete('/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const deletedAnnouncement = await pool.query(
            `DELETE FROM announcements WHERE announcementid = $1 RETURNING *`,
            [id]
        );
        if (deletedAnnouncement.rows.length === 0) {
            return res.status(404).json({ message: "Announcement not found" });
        }
        res.json({ message: "Announcement deleted successfully" });
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

module.exports = router;
--- End of ./server/routes\announcements.js ---

--- Start of ./server/routes\auth.js ---
// server/routes/auth.js
const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const pool = require('../db'); // Adjust the path as needed
const router = express.Router();

router.post('/register', async (req, res) => {
    console.log("Received registration request with:", req.body);

    // Check if the pool is connected
    try {
        await pool.query("SELECT NOW()"); // Test the database connection
        console.log("Database connection is successful.");
    } catch (err) {
        console.error("Database connection error:", err.message);
        return res.status(500).send("Database connection error");
    }

    const { username, email, password, firstName, lastName } = req.body;

    // Validation
    if (!username || !email || !password || !firstName || !lastName) {
        return res.status(400).json({ message: "All fields (username, email, password, firstName, lastName) are required" });
    }

    try {
        const hashedPassword = await bcrypt.hash(password, 10);
        console.log("Password hashed successfully");

        const newUser = await pool.query(
            `INSERT INTO users (username, email, password, FirstName, LastName, RoleID, PaymentStatus)
             VALUES ($1, $2, $3, $4, $5, (SELECT RoleID FROM roles WHERE RoleName = 'member'), FALSE)
             RETURNING *`,
            [username, email, hashedPassword, firstName, lastName]
        );

        console.log("User inserted into the database:", newUser.rows[0]);
        res.json(newUser.rows[0]);
    } catch (err) {
        console.error("Error during registration:", err.message); // More specific logging
        res.status(500).send("Server error");
    }
});



// Login
router.post('/login', async (req, res) => {
    const { username, password } = req.body;

    try {
        const user = await pool.query("SELECT * FROM users WHERE username = $1", [username]);

        if (user.rows.length > 0) {
            const isMatch = await bcrypt.compare(password, user.rows[0].password);
            if (isMatch) {
                const token = jwt.sign(
                    { id: user.rows[0].id, role: user.rows[0].roleid, paymentStatus: user.rows[0].paymentstatus },
                    'your_jwt_secret',
                    { expiresIn: '1h' }
                );
                res.json({
                    token,
                    user: {
                        id: user.rows[0].id,
                        username: user.rows[0].username,
                        email: user.rows[0].email,
                        firstName: user.rows[0].firstname,
                        lastName: user.rows[0].lastname,
                        role: user.rows[0].roleid,
                        paymentStatus: user.rows[0].paymentstatus,
                    }
                });
            } else {
                res.status(400).send("Invalid credentials");
            }
        } else {
            res.status(400).send("User not found");
        }
    } catch (err) {
        console.error(err);
        res.status(500).send("Server error");
    }
});

module.exports = router;

--- End of ./server/routes\auth.js ---

--- Start of ./server/routes\events.js ---
const express = require('express');
const pool = require('../db');
const router = express.Router();

//Create new event (Create)
router.post('/', async(req, res) => {
    const {event_name, event_date, event_location, event_type, requires_registration, created_by_user_id, event_description} = req.body;

    try{
        const newEvent = await pool.query(
            `INSERT INTO events (eventname, eventdate, eventlocation, eventtype, requiresregistration, createdbyuserid, eventdescription) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *`, [event_name, event_date, event_location, event_type, requires_registration, created_by_user_id, event_description] 
        );
        res.json(newEvent.rows[0]);
    }catch(err){
        console.error(err.message);
        res.status(500).send("Server error");
    }

});

//Get all events (Read)
router.get('/', async(req, res) => {
    try{
        const allEvents = await pool.query("SELECT * FROM events");
        res.json(allEvents.rows);
    }catch (err){
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

// Get a single event by ID (Read)
router.get('/:id', async (req, res) => {
    const { id } = req.params;

    try {
        const event = await pool.query("SELECT * FROM events WHERE eventid = $1", [id]);
        if (event.rows.length === 0) {
            return res.status(404).json({ message: "Event not found" });
        }
        res.json(event.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

// Update an event (Update)
router.put('/:id', async (req, res) => {
    const { id } = req.params;
    const { event_name, event_description, event_date, event_location } = req.body;

    try {
        const updatedEvent = await pool.query(
            `UPDATE events
             SET eventname = $1, eventdescription = $2, eventdate = $3, eventlocation = $4
             WHERE eventid = $5 RETURNING *`,
            [event_name, event_description, event_date, event_location, id]
        );

        if (updatedEvent.rows.length === 0) {
            return res.status(404).json({ message: "Event not found" });
        }

        res.json(updatedEvent.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

// Delete an event (Delete)
router.delete('/:id', async (req, res) => {
    const { id } = req.params;

    try {
        const deletedEvent = await pool.query("DELETE FROM events WHERE eventid = $1 RETURNING *", [id]);
        if (deletedEvent.rows.length === 0) {
            return res.status(404).json({ message: "Event not found" });
        }
        res.json({ message: "Event deleted successfully" });
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

module.exports = router;
--- End of ./server/routes\events.js ---

--- Start of ./server/routes\forum.js ---
const express = require('express');
const pool = require("../db");
const router = express.Router();

//create post
router.post('/posts', async(req, res) => {
    const {title, content, userid } = req.body;
    try{
        const newPost = await pool.query(
            `INSERT INTO posts (title, content, userid, createddate) VALUES ($1, $2, $3, NOW()) RETURNING *`, [title, content, userid]
        );
        res.json(newPost.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

//get all post
router.get('/posts', async(req, res) => {
    try {
        const posts = await pool.query("SELECT * FROM posts ORDER BY createddate DESC");
        res.json(posts.rows);
    } catch (err){
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

//get a single post with replies **need to update **
router.get('/posts/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const post = await pool.query("SELECT * FROM posts WHERE postid = $1", [id]);
        const replies = await pool.query ("SELECT * FROM replies WHERE postid = $1 ORDER BY createddate ASC", [id]);
        res.json({post: post.rows[0], replies: replies.rows });
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

// update a post
router.put('/posts/:id', async(req, res) => {
    const { id } = req.params;
    const { title, content } = req.body;

    try {
        const updatedPost = await pool.query( `UPDATE posts SET title = $1, content = $2 WHERE postid = $3 RETURNING *`, [title, content, id]);

        if(updatedPost.rows.length === 0) {
            return res.status(404).json({ message : "Post not found"});
        }

        res.json(updatedPost.rows[0]);
    }catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

// Delete post
router.delete('/posts/:id', async (req, res) => {
    const { id } = req.params;
    try{
        await pool.query("DELETE FROM likes WHERE postid = $1 OR replyid IN (SELECT replyid FROM replies WHERE postid = $1)", [id]);

        await pool.query("DELETE FROM replies WHERE postid = $1", [id]);

        const deletedPost = await pool.query("DELETE FROM posts WHERE postid = $1 RETURNING *", [id]);

        if (deletedPost.rows.length === 0) {
            return res.status(404).json({ message: "Post not found" });
        }

        res.json({ message: "Post deleted successfully" });
    } catch (err) {
        console.error (err.message);
        res.status(500).send("Server error");
    }
});

//add a reply to a post
router.post('/posts/:id/replies', async (req, res) => {
    const { id } = req.params;
    const { content, userid } = req.body;
    try {
        const newReply = await pool.query( `INSERT INTO replies (postid, content, userid, createddate) VALUES ($1, $2, $3, NOW()) RETURNING *`, [id, content, userid]);
        res.json(newReply.rows[0]);
    } catch (err) {
        console.error( err.message );
        res.status(500).send("Server error");
    }

});

//update a reply
router.put('/replies/:id', async ( req, res) => {
    const { id } = req.params;
    const { content } = req.body;

    try {
        const updatedReply = await pool.query( `UPDATE replies SET content = $1 WHERE replyid = $2 RETURNING *`, [content, id]);

        if(updatedReply.rows.length === 0) {
            return res.status(404).json({ message : "Reply not found"});
        }

        res.json(updatedReply.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

//delete reply 
router.delete('/replies/:id', async (req, res) => {
    const { id } = req.params;

    try {
        await pool.query("DELETE FROM likes WHERE replyid = $1", [id]);

        const deletedReply = await pool.query("DELETE FROM replies WHERE replyid = $1 RETURNING *", [id]);

        if(deletedReply.rows.length === 0){
            return res.status(404).json({ message: "Reply not found"});
        }

        res.json({ message: "Reply deleted successfully"});
    } catch(err) {
        console.error (err.message);
        res.status(500).send("Server error");
    }

});

//like a post or reply
router.post('/likes', async (req, res) => {
    const { postid, replyid, userid } = req.body;
    try {
        const newLike = await pool.query( `INSERT INTO likes (postid, replyid, userid) VALUES ($1, $2, $3) RETURNING *`, [postid || null, replyid || null, userid]);
        res.json(newLike.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

//get likes for a post or a reply
router.get('/likes', async (req, res) => {

    const { postid, replyid } = req.query;

    try { 
        
        if(!postid && !replyid){
            return res.status(404).json({message: "Please provide either postid or replyid."});
        }
        
        let likes;

        if(postid){
            likes = await pool.query(
                `SELECT likeid, userid FROM likes WHERE postid = $1`, [postid]
            );
        }else if (replyid) {
            likes = await pool.query( `SELECT likeid, userid FROM likes WHERE replyid = $1`, [replyid]);
        }

        res.json(likes.rows);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

// delete a like by ID
router.delete('/likes/:id', async (req, res) => {
    const { id } = req.params;

    try {
        const deletedLike = await pool.query(`DELETE FROM likes WHERE likeid = $1 RETURNING *`, [id]);

        if (deletedLike.rows.length === 0) {
            return res.status(404).json({message : 'Like not found'});
        }

        res.json({message : "Like deleted successfully"});
    } catch(err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

module.exports = router;


--- End of ./server/routes\forum.js ---

--- Start of ./server/routes\products.js ---
const express = require('express');
const pool = require('../db'); // PostgreSQL connection pool
const router = express.Router();

// Create a new product
router.post('/', async (req, res) => {
    const { productname, description, amount, quantity, producttype } = req.body;
    try {
        const newProduct = await pool.query(
            `INSERT INTO products (productname, description, amount, quantity, producttype) 
             VALUES ($1, $2, $3, $4, $5) RETURNING *`,
            [productname, description, amount, quantity, producttype]
        );
        res.status(201).json(newProduct.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

// Get all products
router.get('/', async (req, res) => {
    try {
        const products = await pool.query(`SELECT * FROM products ORDER BY productname ASC`);
        res.json(products.rows);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

// Get a single product by ID
router.get('/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const product = await pool.query(
            `SELECT * FROM products WHERE productid = $1`,
            [id]
        );
        if (product.rows.length === 0) {
            return res.status(404).json({ message: "Product not found" });
        }
        res.json(product.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

// Update a product
router.put('/:id', async (req, res) => {
    const { id } = req.params;
    const { productname, description, amount, quantity, producttype } = req.body;
    try {
        const updatedProduct = await pool.query(
            `UPDATE products SET productname = $1, description = $2, amount = $3, quantity = $4, producttype = $5 
             WHERE productid = $6 RETURNING *`,
            [productname, description, amount, quantity, producttype, id]
        );
        if (updatedProduct.rows.length === 0) {
            return res.status(404).json({ message: "Product not found" });
        }
        res.json(updatedProduct.rows[0]);
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

// Delete a product
router.delete('/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const deletedProduct = await pool.query(
            `DELETE FROM products WHERE productid = $1 RETURNING *`,
            [id]
        );
        if (deletedProduct.rows.length === 0) {
            return res.status(404).json({ message: "Product not found" });
        }
        res.json({ message: "Product deleted successfully" });
    } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
    }
});

module.exports = router;

--- End of ./server/routes\products.js ---

--- Start of ./server/routes\users.js ---
// server/routes/users.js
const express = require('express');
const pool = require('../db');
const router = express.Router();

// Example user endpoint
router.get('/:id', async (req, res) => {
    const { id } = req.params;

    try {
        const user = await pool.query("SELECT * FROM users WHERE id = $1", [id]);
        res.json(user.rows[0]);
    } catch (err) {
        console.error(err);
        res.status(500).send("Server error");
    }
});

module.exports = router;

--- End of ./server/routes\users.js ---

